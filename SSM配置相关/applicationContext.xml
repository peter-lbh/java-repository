<?xml version="1.0" encoding="UTF-8"?>
<!--自定义XML标签 格式(schema，对应的xsd文件可以在jar包中查询)： xmlns:自定义名=""  下面location那里，第一段是namespace -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
			http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd
            ">
    <!--上面beans的配置原理，其实是表示下面的标签的配置都是有第三方程序来扫描执行的，不然为什么加了注解
    容器就是自动识别该类并注册到容器里供我们使用呢！  下面的配置是搭建框架，每一个标签实际上后台有注册的某个bean帮我们后续实现一些框架模块的功能-->
    <!--1:配置注解解析 spring3.0后开启了自动，但是还是建议手动-->
    <context:annotation-config />
	<context:component-scan base-package="com.xmg.p2p.base"/>

    <!--2：加载外部资源 classpath:mail.properties-->
    <context:property-placeholder location="classpath:db.properties,classpath:sms.properties,classpath:email.properties"/>


    <!--3：配置dataSource -->
    <bean id="masterds" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!--从数据库-->
    <bean id="slaveds" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${salve.driverClassName}"/>
        <property name="url" value="${salve.url}"/>
        <property name="username" value="${salve.username}"/>
        <property name="password" value="${salve.password}"/>
    </bean>
    <!--数据库分发器-->
    <bean id="dataSource" class="com.xmg.p2p.base.utils.P2pRoutingDataSource">
        <!--根据名字对应的目标数据库-->
        <property name="targetDataSources">
            <map>
                <entry key="slaveds" value-ref="slaveds"/>
                <entry key="masterds" value-ref="masterds"/>
            </map>
        </property>
        <!--没有指定名字的默认数据库-->
        <property name="defaultTargetDataSource" ref="masterds"/>
    </bean>
    <!--4:配置sessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:myBatis-config.xml"/>
        <property name="mapperLocations" value="classpath:com/xmg/p2p/base/mapper/*Mapper.xml"/>
        <property name="typeAliasesPackage" value="com.xmg.p2p.base.domain"/>
    </bean>
    <!--5:配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--6：配置事务处理-->
    <tx:advice id="txAdvice">
        <tx:attributes>
            <tx:method name="query*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="select*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="get*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="list*" read-only="true" propagation="SUPPORTS"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>

    <!--7：配置AOP-->
    <!-- “..”和“.”的区别，这里“..”包括p2p下的模块的子包，如果只用“.”则表示p2p下，这样就跟包名不匹配了
    *Service 表示命名的接口统一这种命名方式-->
    <aop:config>
        <aop:pointcut id="txPointCut" expression="execution(* com.xmg.p2p..service.*Service.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
    </aop:config>

    <!--配置mapper扫描器 从包的结构可是看出分层开发分不同包，项目还得分不同模块，还有模块包名-->
    <!-- 也是相当于下面的写法，表示后面有一个读取指定包下mapper的bean帮我们操作，即扫描mapper的接口！！！所有
    后面有该接口对应的类帮我们操作-->
    <!--<mybatis:scan base-package="com.xmg.p2p.*.mapper" />-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.xmg.p2p.base.mapper"/>
    </bean>

</beans>
